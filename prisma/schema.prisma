datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Notebook {
  id        String   @id @default(uuid())
  title     String
  content   String
  sections  Section[]
  userId    String
  user      User @relation(fields: [userId], references: [id])
  sessions  UserSession[]
  createdAt DateTime @default(now())
  deletedAt DateTime? @db.Timestamp(6)

  @@index([deletedAt])
}

model Section {
  id          String   @id @default(uuid())
  title       String
  description String
  notebookId  String
  notebook    Notebook @relation(fields: [notebookId], references: [id])
  createdAt   DateTime @default(now())
  deletedAt   DateTime? @db.Timestamp(6)
  cards       Card[]
  
  @@index([notebookId])
}

model Card {
  id            String   @id @default(uuid())
  title         String
  content       String
  extra         String?
  sectionId     String
  section       Section @relation(fields: [sectionId], references: [id])
  sessionCards  UserSessionCard[]
  createdAt     DateTime @default(now())
  deletedAt     DateTime? @db.Timestamp(6)

  @@index([sectionId])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  details   UserDetails?
  createdAt DateTime @default(now())
  notebooks Notebook[]
  sessions  UserSession[]

  @@index([id])
}

model UserDetails {
  id              String   @id @default(uuid())
  userId          String
  user            User @relation(fields: [userId], references: [id])
  points          Int  @default(0)
  daysStrike      Int  @default(0)
  notebookStudied Int  @default(0)
  cardsViewed     Int  @default(0)
  createdAt       DateTime @default(now())
  deletedAt       DateTime? @db.Timestamp(6)

  @@index([userId])
  @@unique([userId])
}

model UserSession {
  id              String            @id @default(uuid())
  userId          String
  notebookId      String
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?         @db.Timestamp(6)

  user            User              @relation(fields: [userId], references: [id])
  notebook        Notebook          @relation(fields: [notebookId], references: [id])
  sessionCards    UserSessionCard[]

  @@index([userId])
  @@index([notebookId])
}

model UserSessionCard {
  id              String         @id @default(uuid())
  sessionId       String
  cardId          String
  difficultyId    String?
  createdAt       DateTime       @default(now())
  answerAt        DateTime?      @db.Timestamp(6)
  deletedAt       DateTime?      @db.Timestamp(6)
  
  session         UserSession    @relation(fields: [sessionId], references: [id])
  card            Card           @relation(fields: [cardId], references: [id])
  difficulty      Difficulty?    @relation(fields: [difficultyId], references: [id])

  @@index([sessionId])
  @@index([cardId])
  @@index([difficultyId])
}

model Difficulty {
  id              String        @id @default(uuid())
  name            String
  order           Int           @default(0)
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?     @db.Timestamp(6)
  sessionCards    UserSessionCard[]

  @@index([id])
}